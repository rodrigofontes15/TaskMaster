@model TaskMaster.ViewModels.BugsViewModel
@{
    /**/

    ViewBag.Title = "Home Page";

    string abertos = ViewData["QtdBugsAbertos"].ToString();
    string emTrat = ViewData["QtdBugsEmTrat"].ToString();
    string Corrig = ViewData["QtdBugsCorrigido"].ToString();


    string qtdprojsNoPrazo = ViewData["qtdprojsNoPrazo"].ToString();
    string qtdprojsEmAtraso = ViewData["qtdprojsEmAtraso"].ToString();
    string qtdprojsFechado = ViewData["qtdprojsFechado"].ToString();

    string bugtipo500 = ViewData["bugtipo500"].ToString();
    string bugtipo404 = ViewData["bugtipo404"].ToString();
    string bugtipoInterface = ViewData["bugtipoInterface"].ToString();
    string bugtipoFluxo = ViewData["bugtipoFluxo"].ToString();
    string bugtipoCalc = ViewData["bugtipoCalc"].ToString();

    string bugtestetipoUni = ViewData["bugtestetipoUni"].ToString();
    string bugtestetipoInt = ViewData["bugtestetipoInt"].ToString();
    string bugtestetipoFum = ViewData["bugtestetipoFum"].ToString();
    string bugtestetipoInf = ViewData["bugtestetipoInf"].ToString();
    string bugtestetipoReg = ViewData["bugtestetipoReg"].ToString();
    string bugtestetipoPer = ViewData["bugtestetipoPer"].ToString();
    string bugtestetipoBeta = ViewData["bugtestetipoBeta"].ToString();

    string MediaTempoSolucao = ViewData["MediaTempoSolucao"].ToString();

    int ratio = 2;

    int meta = 5;

    int somabugs = Convert.ToInt16(ViewData["somabugs"]);

    int somabugs500 = Convert.ToInt16(ViewData["somabugs500"]);
    int somabugs404 = Convert.ToInt16(ViewData["somabugs404"]);
    int somabugsint = Convert.ToInt16(ViewData["somabugsint"]);
    int somabugsfluxo = Convert.ToInt16(ViewData["somabugsfluxo"]);
    int somabugscalc = Convert.ToInt16(ViewData["somabugscalc"]);
}

<div class="jumbotron container-fluid">
    <h2><b>Task Master</b></h2>
    <h4>
        Controle o Processo de Desenvolvimento de Software.<br />
        Cadastre Projetos, as respectivas Tarefas (Tasks) de Teste e controle os Bugs encontrados.
    </h4>
</div>
<hr />
<center><h4><b>Time de Desenvolvimento</b></h4></center>
<div class="row">
    @foreach (var dev in Model.Devs)
    {
        <div align="center" class="col-md-3">
            <div class="shadowbox" style="background-color:lightgrey">
                <table align="center">
                    <tr>
                        <td rowspan="3"><img src=@dev.UrlPhotoDev alt="Image" width="60" height="80"></td>
                        <td><h4><b>@dev.DevNome</b></h4></td>
                    </tr>
                    <tr>
                        <td><a href="mailto:@dev.EmailDev" target="_top">Enviar e-mail</a></td>
                    </tr>
                    <tr>
                        <td>@dev.TelDev</td>
                    </tr>
                    <tr>
                        <td colspan="2"><b>Ver @Html.ActionLink("todos os Bugs", "ListarBugDev", "Home", new { DevId = dev.DevsId }, null) com @dev.DevNome</b></td>
                    </tr>
                </table>
            </div>
        </div>
    }
</div>
<hr />
<div class="row">
    <div class="col-md-4" align="center">
        <h4><b>Estado dos Bugs</b></h4>
        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="active" align="center"><center>Estado</center></th>
                    <th class="active" align="center"><center>Quantidade de Bugs</center></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td align="center" style="background-color:lightcoral">@Html.ActionLink("Abertos", "ListarBugEstado", "Home", new { estado = "Aberto" }, new { Style = "color:White" })</td>
                    <td align="center">@abertos</td>
                </tr>
                <tr>
                    <td align="center" style="background-color:lightsalmon">@Html.ActionLink("Em Tratamento", "ListarBugEstado", "Home", new { estado = "Em Tratamento" }, new { Style = "color:White" })</td>
                    <td align="center">@emTrat</td>
                </tr>
                <tr>
                    <td align="center" style="background-color:lightgreen">@Html.ActionLink("Corrigidos", "ListarBugEstado", "Home", new { estado = "Corrigido" }, new { Style = "color:White" })</td>
                    <td align="center">@Corrig</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="col-md-4" align="center">
        <h4><b>Bugs por Tipo</b></h4>
        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="active" align="center"><center>Tipo de Bug</center></th>
                    <th class="active" align="center"><center>Quantidade</center></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td align="center">@Html.ActionLink("Erro 500", "ListarBugTipo", "Home", new { tipobug = "Erro 500" }, null)</td>
                    <td align="center">@bugtipo500</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Erro 404", "ListarBugTipo", "Home", new { tipobug = "Erro 404" }, null)</td>
                    <td align="center">@bugtipo404</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Interface", "ListarBugTipo", "Home", new { tipobug = "Interface" }, null)</td>
                    <td align="center">@bugtipoInterface</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Fluxo", "ListarBugTipo", "Home", new { tipobug = "Fluxo" }, null)</td>
                    <td align="center">@bugtipoFluxo</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Calculo", "ListarBugTipo", "Home", new { tipobug = "Calculo" }, null)</td>
                    <td align="center">@bugtipoCalc</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="col-md-4" align="center">
        <h4><b>Tempo médio de resolução</b></h4>
        <div class="container-fluid" style="background-color:#eeeeee">
            <table align="center">
                <tr>
                    @if (MediaTempoSolucao.AsInt() > meta)
                    {
                        <td rowspan="2" colspan="1"><h5><font size="150" color="red">@MediaTempoSolucao&nbsp;</font></h5></td>
                    }
                    else
                    {
                        <td rowspan="2" colspan="1"><h5><font size="150" color="green">@MediaTempoSolucao&nbsp;</font></h5></td>
                    }
                </tr>
                <tr>
                    <td>dias para corrigir um Bug</td>
                </tr>
            </table>
            <table align="center">
                <tr>
                    <td rowspan="2" colspan="1">A meta de dias é</td>
                </tr>
                <tr>
                    <td><h5><font size="150" color="green">@meta</font></h5></td>
                </tr>
            </table>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-4" align="center">
        <h4><b>Estado dos Projetos</b></h4>
        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="active" align="center"><center>Estado</center></th>
                    <th class="active" align="center"><center>Quantidade de Projetos</center></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td align="center" style="background-color:lightcoral">@Html.ActionLink("Em Atraso", "ListaProjetoEstado", "Home", new { estado = "Em Atraso" }, new { Style = "color:White" })</td>
                    <td align="center">@qtdprojsEmAtraso</td>
                </tr>
                <tr>
                    <td align="center" style="background-color:lightsalmon">@Html.ActionLink("No Prazo", "ListaProjetoEstado", "Home", new { estado = "No Prazo" }, new { Style = "color:White" })</td>
                    <td align="center">@qtdprojsNoPrazo</td>
                </tr>
                <tr>
                    <td align="center" style="background-color:lightgreen">@Html.ActionLink("Fechado", "ListaProjetoEstado", "Home", new { estado = "Fechado" }, new { Style = "color:White" })</td>
                    <td align="center">@qtdprojsFechado</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-4" align="center">
        <h4><b>Bugs por Projeto</b></h4>
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th class="active"><center>Projeto</center></th>
                    <th class="active"><center>Bugs</center></th>
                    <th class="active" title="2 Bugs para cada Task do Projeto"><center>Meta</center></th>
                    <th class="active" title="Número real de Bugs encontrados em cada Task do Projeto"><center>Indicador</center></th>
                </tr>
            <tbody>
                @foreach (var projeto in Model.Projetos)
                {
                    <tr>
                        <td>
                            @projeto.NomeProjeto
                        </td>
                        <td>
                            @projeto.QtdBugsPrj
                        </td>
                        <td>
                            1:@ratio
                        </td>
                        @if (@projeto.BugsRatio > @ratio)
                        {
                            <td style="background-color:lightcoral" align="center">
                                <b>1:@projeto.BugsRatio</b>
                            </td>
                        }
                        else
                        {
                            <td style="background-color:lightgreen" align="center">
                                1:@projeto.BugsRatio
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4" align="center">
        <h4><b>Bugs por Tarefa de Teste</b></h4>
        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="active" align="center"><center>Tipo de Teste</center></th>
                    <th class="active" align="center"><center>Quantidade</center></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td align="center">@Html.ActionLink("Unitário", "ListarBugTipoTask", "Home", new { tipotask = "Unitário" }, null)</td>
                    <td align="center">@bugtestetipoUni</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Integração", "ListarBugTipoTask", "Home", new { tipotask = "Integração" }, null)</td>
                    <td align="center">@bugtestetipoInt</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Fumaça", "ListarBugTipoTask", "Home", new { tipotask = "Fumaça" }, null)</td>
                    <td align="center">@bugtestetipoFum</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Interface", "ListarBugTipoTask", "Home", new { tipotask = "Interface" }, null)</td>
                    <td align="center">@bugtestetipoInf</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Regressão", "ListarBugTipoTask", "Home", new { tipotask = "Regressão" }, null)</td>
                    <td align="center">@bugtestetipoReg</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Performance/Carga", "ListarBugTipoTask", "Home", new { tipotask = "Performance/Carga" }, null)</td>
                    <td align="center">@bugtestetipoPer</td>
                </tr>
                <tr>
                    <td align="center">@Html.ActionLink("Beta/Aceitação", "ListarBugTipoTask", "Home", new { tipotask = "Beta/Aceitação" }, null)</td>
                    <td align="center">@bugtestetipoBeta</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/drilldown.js"></script>
<div class="row">
    <div class="col-md-6" align="center">
        @using Highsoft.Web.Mvc.Charts
        @using Highsoft.Web.Mvc.Charts.Rendering
        @using System.Collections;

        @{ var chartOptions =
                   new Highcharts
                   {
                       Chart = new Highsoft.Web.Mvc.Charts.Chart
                       {
                           PlotBackgroundColor = null,
                           PlotBorderWidth = null,
                           PlotShadow = null,
                       },
                       Title = new Title
                       {
                           Text = "Distribuição % de Bugs (desde início do ano)"
                       },
                       Tooltip = new Tooltip
                       {
                           PointFormat = "{series.name}: <b>{point.percentage:.1f}%</b>"
                       },
                       PlotOptions = new PlotOptions
                       {
                           Pie = new PlotOptionsPie
                           {
                               AllowPointSelect = true,
                               Cursor = PlotOptionsPieCursor.Pointer,
                               DataLabels = new Hashtable { { "enabled", false } },
                               ShowInLegend = true
                           }
                       },
                       XAxis = new List<XAxis>
                           {
        new XAxis
        {
            Title = new XAxisTitle
            {
                Text = null
            },
            Categories = new List<string> { "Erro 500", "Erro 404", "Interface", "Fluxo", "Calculo" }
        }
                                           },
                       YAxis = new List<YAxis>
                           {
        new YAxis
        {
            Min = 0,
            Title = new YAxisTitle
            {
                Text = "Quantidade de Bugs",
                Align = YAxisTitleAlign.Center
            }
        }
                                           },
                       Series = new List<Series>
                           {
        new PieSeries
        {
            Name = "Percentual",
            Data = @ViewData["pieData"] as List<PieSeriesData>
        },

                                           }
                   };

            chartOptions.ID = "chart";
            var renderer = new HighchartsRenderer(chartOptions);
        }

        @Html.Raw(renderer.RenderHtml())
    </div>
    <div class="col-md-6" align="center">
        @{var chartOptions2 = new Highcharts
            {
                Title = new Title
                {
                    Text = "Evolução Bugs Abertos VERSUS Corrigidos",
                    X = -20
                },

                XAxis = new List<XAxis>
{
                new XAxis
                {
                    Categories = new List<string> { "Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
                                "Jul", "Ago", "Set", "Out", "Nov", "Dez" },

                }
            },
                YAxis = new List<YAxis>
{
                new YAxis
                {
                    Title = new YAxisTitle
                    {
                        Text = "Bugs"
                    },
                    PlotLines = new List<YAxisPlotLines>
                {
                            new YAxisPlotLines
                        {
                            Value = 0,
                            Width = 1,
                            Color = "#808080"
                        }
                    }
                }
            },
                Tooltip = new Tooltip
                {
                    PointFormat = "{point.y}"
                    //ValueSuffix = "°C"
                },
                Legend = new Legend
                {
                    Layout = LegendLayout.Vertical,
                    Align = LegendAlign.Right,
                    VerticalAlign = LegendVerticalAlign.Middle,
                    BorderWidth = 0
                },
                Series = new List<Series>
{
                new LineSeries
                {
                    Name = "Encontrados",
                    Data = @ViewData["encontrados"] as List<LineSeriesData>
                },
                new LineSeries
                {
                    Name = "Corrigidos",
                    Data = @ViewData["corrigidos"] as List<LineSeriesData>
                }
            }
            };

            chartOptions2.ID = "chart2";
            var renderer2 = new HighchartsRenderer(chartOptions2);
        }

        @Html.Raw(renderer2.RenderHtml())
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12" align="center">
        <script type="text/javascript">

            function formatToolTip() {
                return '<b>' + this.x + '</b><br/>' +
                    this.series.name + ': ' + this.y + '<br/>' +
                    'Total: ' + this.point.stackTotal;
            }
        </script>

        @{ var chartOptions3 = new Highcharts
            {
                Title = new Title
                {
                    Text = "Distribuição de Tasks (desde início do ano)"
                },
                XAxis = new List<XAxis>
    {
                new XAxis
                {
                    Categories = new List<string> { "Unitario", "Integração", "Fumaça", "Interface", "Regressão", "Performance/Carga", "Beta/Aceitção" }
                }
            },
                YAxis = new List<YAxis>
    {
                new YAxis
                {
                    Min = 0,
                    Title = new YAxisTitle
                    {
                        Text = "Total de Tasks"
                    },
                    StackLabels = new YAxisStackLabels
                    {
                        Enabled = true,
                        Style = new YAxisStackLabelsStyle() { FontWeight = "bold" }
                    }
                }
            },
                Legend = new Legend
                {
                    Align = LegendAlign.Right,
                    X = -30,
                    VerticalAlign = LegendVerticalAlign.Top,
                    Y = 25,
                    Floating = true,
                    BorderColor = "#CCC",
                    BorderWidth = 1,
                    BackgroundColor = "white"

                },
                Tooltip = new Tooltip
                {
                    Formatter = "formatToolTip"
                },
                PlotOptions = new PlotOptions
                {
                    Column = new PlotOptionsColumn
                    {
                        Stacking = PlotOptionsColumnStacking.Normal,
                        DataLabels = new PlotOptionsColumnDataLabels
                        {
                            Enabled = true,
                            Color = "#FFFFFF",

                            Shadow = new Shadow()
                            {
                                Enabled = true,
                                Color = "black",
                                Width = 10,
                                OffsetX = 0,
                                OffsetY = 0
                            }
                        }
                    }
                },
                Series = new List<Series>
    {
                new ColumnSeries
                {
                    Name = "Enzo",
                    Data = @ViewData["enzoData"] as List<ColumnSeriesData>
                },
                new ColumnSeries
                {
                    Name = "Valentina",
                    Data = @ViewData["valentinaData"] as List<ColumnSeriesData>
                },
                new ColumnSeries
                {
                    Name = "Miguel",
                    Data = @ViewData["miguelData"] as List<ColumnSeriesData>
                }
            }
            };

            chartOptions3.ID = "chart3";
            var renderer3 = new HighchartsRenderer(chartOptions3);
        }

        @Html.Raw(renderer3.RenderHtml())
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12" align="center">
        @{ var chartOptions4 = new Highcharts
            {
                Title = new Title
                {
                    Text = "Distribuição de Bugs por Dev (desde o início do ano)"
                },
                Subtitle = new Subtitle
                {
                    Text = "Clique na coluna para ver detalhes"
                },
                XAxis = new List<XAxis>
{
                new XAxis
                {
                    Type = "category"
                }
            },
                YAxis = new List<YAxis>
{
                new YAxis
                {
                    Title = new YAxisTitle
                    {
                        Text = "Percentual de Bugs com o Dev"
                    }
                }
            },
                Legend = new Legend
                {
                    Enabled = false
                },
                Tooltip = new Tooltip
                {
                    HeaderFormat = "<span style='font-size:11px'>{series.name}</span><br>",
                    PointFormat = "<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> do total<br/>"
                },

                PlotOptions = new PlotOptions
                {
                    Series = new PlotOptionsSeries
                    {
                        DataLabels = new PlotOptionsSeriesDataLabels
                        {
                            Enabled = true,
                            Format = "{point.y:.1f}%"
                        }
                    }
                },
                Series = new List<Series>
{
                new ColumnSeries
                {
                    Name = "Devs",
                    ColorByPoint = true,
                    Data = new List<ColumnSeriesData>
    {
                        new ColumnSeriesData { Name = "Bolsonaro", Y = ((@Convert.ToDouble(ViewData["bugsbolsonaro"]))*100)/somabugs, Drilldown = "Bolsonaro" },
                        new ColumnSeriesData { Name = "Lula", Y = ((@Convert.ToDouble(ViewData["bugslula"]))*100)/somabugs, Drilldown = "Lula" },
                        new ColumnSeriesData { Name = "Collor", Y = ((@Convert.ToDouble(ViewData["bugscollor"]))*100)/somabugs, Drilldown = "Collor" },
                        new ColumnSeriesData { Name = "FHC", Y = ((@Convert.ToDouble(ViewData["bugsfhc"]))*100)/somabugs, Drilldown = "FHC" },
                    }
                }
            },
                Drilldown = new Drilldown
                {
                    Series = new List<Series>
{
                    new ColumnSeries
                    {
                        Name = "Bolsonaro",
                        Id = "Bolsonaro",
                        Data = new List<ColumnSeriesData>
        {
                            new ColumnSeriesData { Name = "Erro 500", Y = ((@Convert.ToDouble(ViewData["bugserro500bolso"]))*100)/(@Convert.ToDouble(ViewData["bugsbolsonaro"])) },
                            new ColumnSeriesData { Name = "Erro 404", Y = ((@Convert.ToDouble(ViewData["bugserro404bolso"]))*100)/(@Convert.ToDouble(ViewData["bugsbolsonaro"])) },
                            new ColumnSeriesData { Name = "Interface", Y =((@Convert.ToDouble(ViewData["bugserrointbolso"]))*100)/(@Convert.ToDouble(ViewData["bugsbolsonaro"])) },
                            new ColumnSeriesData { Name = "Fluxo", Y = ((@Convert.ToDouble(ViewData["bugserrofluxobolso"]))*100)/(@Convert.ToDouble(ViewData["bugsbolsonaro"])) },
                            new ColumnSeriesData { Name = "Calculo", Y = ((@Convert.ToDouble(ViewData["bugserrocalcbolso"]))*100)/(@Convert.ToDouble(ViewData["bugsbolsonaro"])) },
                        }
                    },
                    new ColumnSeries
                    {
                        Name = "Lula",
                        Id = "Lula",
                        Data = new List<ColumnSeriesData>
        {
                            new ColumnSeriesData { Name = "Erro 500", Y = ((@Convert.ToDouble(ViewData["bugserro500lula"]))*100)/(@Convert.ToDouble(ViewData["bugslula"])) },
                            new ColumnSeriesData { Name = "Erro 404", Y = ((@Convert.ToDouble(ViewData["bugserro404lula"]))*100)/(@Convert.ToDouble(ViewData["bugslula"])) },
                            new ColumnSeriesData { Name = "Interface", Y =((@Convert.ToDouble(ViewData["bugserrointlula"]))*100)/(@Convert.ToDouble(ViewData["bugslula"])) },
                            new ColumnSeriesData { Name = "Fluxo", Y = ((@Convert.ToDouble(ViewData["bugserrofluxolula"]))*100)/(@Convert.ToDouble(ViewData["bugslula"])) },
                            new ColumnSeriesData { Name = "Calculo", Y = ((@Convert.ToDouble(ViewData["bugserrocalclula"]))*100)/(@Convert.ToDouble(ViewData["bugslula"])) },
                        }
                    },
                    new ColumnSeries
                    {
                        Name = "Collor",
                        Id = "Collor",
                        Data = new List<ColumnSeriesData>
        {
                            new ColumnSeriesData { Name = "Erro 500", Y = ((@Convert.ToDouble(ViewData["bugserro500collor"]))*100)/(@Convert.ToDouble(ViewData["bugscollor"])) },
                            new ColumnSeriesData { Name = "Erro 404", Y = ((@Convert.ToDouble(ViewData["bugserro404collor"]))*100)/(@Convert.ToDouble(ViewData["bugscollor"])) },
                            new ColumnSeriesData { Name = "Interface", Y =((@Convert.ToDouble(ViewData["bugserrointcollor"]))*100)/(@Convert.ToDouble(ViewData["bugscollor"])) },
                            new ColumnSeriesData { Name = "Fluxo", Y = ((@Convert.ToDouble(ViewData["bugserrofluxocollor"]))*100)/(@Convert.ToDouble(ViewData["bugscollor"])) },
                            new ColumnSeriesData { Name = "Calculo", Y = ((@Convert.ToDouble(ViewData["bugserrocalccollor"]))*100)/(@Convert.ToDouble(ViewData["bugscollor"])) },
                        }
                    },
                    new ColumnSeries
                    {
                        Name = "FHC",
                        Id = "FHC",
                        Data = new List<ColumnSeriesData>
        {
                            new ColumnSeriesData { Name = "Erro 500", Y = ((@Convert.ToDouble(ViewData["bugserro500fhc"]))*100)/(@Convert.ToDouble(ViewData["bugsfhc"])) },
                            new ColumnSeriesData { Name = "Erro 404", Y = ((@Convert.ToDouble(ViewData["bugserro404fhc"]))*100)/(@Convert.ToDouble(ViewData["bugsfhc"])) },
                            new ColumnSeriesData { Name = "Interface", Y =((@Convert.ToDouble(ViewData["bugserrointfhc"]))*100)/(@Convert.ToDouble(ViewData["bugsfhc"])) },
                            new ColumnSeriesData { Name = "Fluxo", Y = ((@Convert.ToDouble(ViewData["bugserrofluxofhc"]))*100)/(@Convert.ToDouble(ViewData["bugsfhc"])) },
                            new ColumnSeriesData { Name = "Calculo", Y = ((@Convert.ToDouble(ViewData["bugserrocalcfhc"]))*100)/(@Convert.ToDouble(ViewData["bugsfhc"])) },
                        }
                    },
                }
                }
            };

            chartOptions4.ID = "chart4";
            var renderer4 = new HighchartsRenderer(chartOptions4);
        }

        @Html.Raw(renderer4.RenderHtml())

    </div>
</div>
